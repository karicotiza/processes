import time as tm  # Импорт библиотеки для работы со временем в ОС (Для ожидаемых таймеров)
import subprocess as sp  # Импорт библиотеки для работы с суб-процессами (Запуск другой программы)
from multiprocessing import Process  # Импорт библиотеки для работы с процессами (Для создания процессов)


def function(path):  # Функция прототип (Для создания процесса)
    sp.run(  # Создать процесс со следующими параметрами
        [
            "C:\\Users\\Kur7u\\AppData\\Local\\Programs\\Python\\Python39\\python.exe",  # Путь к интерпретатору
            path  # Путь к файлу
        ],
        capture_output=True,  # Запретить процессу доступ к консоли ?
    )


def main():
    process_list = []  # Список запущенных процессов
    time_list = []  # Список хранящий время запуска процессов

    # Готовые параметры
    # path = "test.py"  # Путь к файлу
    # quantity = 2 # Количество процессов в памяти
    # time = 5 # Время работы процессов

    # Ввод параметров вручную
    path = str(input("Введите путь к программе: "))  # Путь к файлу
    quantity = int(input("Введите кол-во программ: "))  # Количество процессов в памяти
    time = int(input("Введите лимит времени в секундах: "))  # Время работы процессов

    while True:  # Цикл, для того, чтобы программа продолжала работать неограниченное время
        if len(process_list) < quantity:  # Если процессов в памяти меньше, чем их должно быть в памяти
            process = Process(  # Создать процесс со следующими параметрами
                target=function,  # Взять за основу прототип функции function())
                daemon=True,  # Прекратит ли он работать после закрытия программы ?
                args=(path, )  # Передать в прототип переменную пути
            )
            process.start()  # Запустить процесс
            process_list.append(process)  # Добавить процесс в список процессов
            time_list.append(tm.time())  # Добавить время запуска процесса в список
            print(process_list)  # Вывести в консоль список запущенных процессов
        else:  # Иначе
            if (tm.time() - time_list[0]) >= time:  # Если процесс работает дольше указанного времени
                process_list[0].terminate()  # Завершить его
                process_list.pop(0)  # Удалить его из списка запущенных процессов
                time_list.pop(0)  # Удалить время его запуска из списка

        # Раскомментировать если нужно рассмотреть процесс в деталях
        # print(round(tm.time() - time_list[0], 2))
        tm.sleep(0.5)


if __name__ == '__main__':  # Если название файла "main.py"
    main()  # Запустить основную функцию
